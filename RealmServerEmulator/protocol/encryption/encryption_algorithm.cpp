// Copyright 2017 Sardak Software

#include "protocol/encryption/encryption_algorithm.h"

namespace
{

    static const uint8_t DECRYPTION_ALGORITHM[] = {
        0x78, 0x00, 0x00, 0x00,
        0x04, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x06,

        0x55, 0x8b, 0xec, 0x50, 0x53, 0x56, 0x57, 0x8b, 0xf1, 0x8b, 0xfa, 0x8b, 0x0e, 0x89, 0x0f, 0x83,
        0xc6, 0x04, 0x83, 0xc7, 0x04, 0xc1, 0xe9, 0x02, 0xbb, 0x00, 0x00, 0x00, 0x00, 0xa1, 0x50, 0x00,
        0x00, 0x00, 0x33, 0x1e, 0xa5, 0xf7, 0x25, 0x54, 0x00, 0x00, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00,
        0x31, 0x47, 0xfc, 0xe0, 0xed, 0xa3, 0x50, 0x00, 0x00, 0x00, 0x89, 0x1f, 0x5f, 0x5e, 0x5b, 0x58,
        0x5d, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

        0x03, 0x1e, 0x00, 0x27, 0x00, 0x36, 0x00,
        0x00,

        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xde, 0x8a, 0x4f, 0x7e, 0x00, 0x00
    };

    static const uint8_t ENCRYPTION_ALGORITHM[] = {
        0xd0, 0x00, 0x00, 0x00,
        0x04, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x0b,

        0x55, 0x8b, 0xec, 0x50, 0x53, 0x56, 0x57, 0xc1, 0xe9, 0x02, 0xa1, 0x90, 0x00, 0x00, 0x00, 0x8b,
        0xf2, 0x8b, 0x1e, 0xf7, 0x25, 0x94, 0x00, 0x00, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x31, 0x06,
        0xf7, 0x25, 0x94, 0x00, 0x00, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x31, 0x46, 0x04, 0x33, 0x5e,
        0x04, 0xf7, 0x25, 0x94, 0x00, 0x00, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x31, 0x46, 0x08, 0x33,
        0x5e, 0x08, 0xa3, 0x90, 0x00, 0x00, 0x00, 0x83, 0xf9, 0x04, 0x7c, 0x3d, 0xf7, 0x25, 0x94, 0x00,
        0x00, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x31, 0x46, 0x0c, 0x33, 0x5e, 0x0c, 0xa3, 0x90, 0x00,
        0x00, 0x00, 0x83, 0xf9, 0x05, 0x7c, 0x22, 0x83, 0xc6, 0x10, 0x83, 0xe9, 0x05, 0x74, 0x07, 0x33,
        0x1e, 0x83, 0xc6, 0x04, 0xe0, 0xf9, 0x3b, 0x1e, 0x74, 0x0f, 0xb9, 0x10, 0x00, 0x00, 0x00, 0xba,
        0x98, 0x00, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x5e, 0x5b, 0x58, 0x5d, 0xc3, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe,
        0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

        0x08, 0x0b, 0x00, 0x15, 0x00, 0x22, 0x00, 0x33, 0x00, 0x43, 0x00, 0x4e, 0x00, 0x5e, 0x00, 0x80, 0x00,
        0x01, 0x85, 0x00,

        0x01, 0x00, 0x04, 0x88, 0x29, 0x62,
        0x00, 0x00,
    };

    void encrypt_data(uint8_t* data, size_t size)
    {
        size_t end = size - 3;

        data[0] = protocol::create_random_bytes(1);
        data[1] = protocol::create_random_bytes(1);

        for (size_t index = 2; index < end; index += 4)
        {
            data[index + 0] = data[index + 0] - 0x39 + data[0];
            data[index + 1] = data[index + 1] + 0x46 - data[1];
            data[index + 2] = data[index + 2] + 0x0c - data[0];
            data[index + 3] = data[index + 3] - 0x30 + data[1];
        }
    }

    void write_algorithm(const uint8_t* algorithm, size_t size, int state_offset,
                         const protocol::EncryptionState::SubState* substate, network::Buffer* buffer)
    {
        buffer->grow(buffer->size() + size);
        uint8_t* data = buffer->data();

        std::memcpy(data, algorithm, size);

        auto state_data = reinterpret_cast<uint32_t*>(data + state_offset);
        state_data[0] = substate->key;
        state_data[1] = substate->multiplier;

        encrypt_data(data + 8, size - 8);

        buffer->advance(size);
    }

}  // namespace

void protocol::write_decryption_algorithm(const protocol::EncryptionState* state, network::Buffer* buffer)
{
    write_algorithm(DECRYPTION_ALGORITHM, sizeof(DECRYPTION_ALGORITHM), 0x5c, &state->encryption, buffer);
}

void protocol::write_encryption_algorithm(const protocol::EncryptionState* state, network::Buffer* buffer)
{
    write_algorithm(ENCRYPTION_ALGORITHM, sizeof(ENCRYPTION_ALGORITHM), 0x9c, &state->encryption, buffer);
}
